Given a 2D array(m x n). The task is to check if there is any path from top left to bottom right. In the matrix, -1 is considered as blockage (canâ€™t go through this cell) and 0 is considered path cell (can go through it).
Input format:
First line contains the value of m and n.
Next m line contains n elements(array elements).
Output format:
If there is any path from top left to bottom right, then print Yes otherwise print No.
Example:
Input:
3 3
0 -1 -1
0 0 0
-1 -1 0
Output:
Yes


output----->
import java.io.*;
import java.util.*;
class Matrix
{
public static void main(String args[])
{
Scanner s=new Scanner(System.in);
int r=s.nextInt();
int c=s.nextInt();
int arr[][]=new int[r][c];
for(int i=0;i<r;i++)
{
for(int j=0;j<c;j++)
{
arr[i][j]=Integer.valueOf(s.next());
}
}
int flag=1;
for(int i=0;i<r-1;i++)
{
for(int j=0;j<c-1;j++)
{
if(arr[i][j]==0 && arr[i][j+1]==0 || arr[i][j]==0 && arr[i+1][j]==0)
{
flag=1;
}
else{
flag=0;
}
}
}
if(flag==1)
{
System.out.println("Yes");
}
else
{
System.out.println("No");
}
}
}
